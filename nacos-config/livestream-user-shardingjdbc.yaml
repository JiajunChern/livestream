livestream:
  server:
    redis:
    nacos:
    rocketmq:
    mysql-master:
    mysql-slave:
  rmq:
    consumer:
      nameSrv: ${livestream.server.rocketmq}:9876
      groupName: ${spring.application.name}
    producer:
      nameSrv: ${livestream.server.rocketmq}:9876
      groupName: ${spring.application.name}
      applicationName: ${spring.application.name}
      sendMsgTimeout: 3000
      retryTimes: 2

dataSources:
  user_master: ##新表，重建的分表
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://${livestream.server.mysql-master}:3306/livestream_user?useUnicode=true&characterEncoding=utf8
    username: root
    password: root123_A

  user_slave0: ##新表，重建的分表
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://${livestream.server.mysql-slave}:3306/livestream_user?useUnicode=true&characterEncoding=utf8
    username: root
    password: root123_A

rules:
  - !READWRITE_SPLITTING
    dataSources:
      user_ds:
        staticStrategy:
          writeDataSourceName: user_master
          readDataSourceNames:
            - user_slave0
  - !SINGLE
    defaultDataSource: user_ds ## 不分表分分库的默认数据源
  - !SHARDING
    tables:
      t_user:
        actualDataNodes: user_ds.t_user_${(0..99).collect(){it.toString().padLeft(2,'0')}}
        tableStrategy:
          standard:
            shardingColumn: user_id
            shardingAlgorithmName: t_user-inline
      t_user_tag:
        actualDataNodes: user_ds.t_user_tag_${(0..99).collect(){it.toString().padLeft(2,'0')}}
        tableStrategy:
          standard:
            shardingColumn: user_id
            shardingAlgorithmName: t_user_tag-inline
      t_user_phone:
        actualDataNodes: user_ds.t_user_phone_${(0..99).collect(){it.toString().padLeft(2,'0')}}
        tableStrategy:
          standard:
            shardingColumn: user_id
            shardingAlgorithmName: t_user_phone-inline
    shardingAlgorithms:
      t_user-inline:
        type: INLINE
        props:
          algorithm-expression: t_user_${(user_id % 100).toString().padLeft(2,'0')}
      t_user_tag-inline:
        type: INLINE
        props:
          algorithm-expression: t_user_tag_${(user_id % 100).toString().padLeft(2,'0')}
      t_user_phone-inline:
        type: INLINE
        props:
          algorithm-expression: t_user_phone_${(user_id % 100).toString().padLeft(2,'0')}
props:
  sql-show: true
  max-connections-size-per-query: 3